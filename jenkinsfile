pipeline {
  agent { label 'jenkins-agent' }

  environment {
    APP_NAME      = 'devsecops2-challenge'
    REGISTRY_HOST = '10.25.157.175:32030'
    IMAGE_ROOT    = "${REGISTRY_HOST}/docker-hosted"
    DEV_URL       = 'http://10.25.157.175:32007'
  }

  stages {
    stage('Checkout') {
      steps {
        git(
          url:           'https://github.com/pranesh6hpe/devsecops2-challenge.git',
          branch:        'main',
          credentialsId: 'git-https'
        )
      }
    }

    stage('Build & Test') {
      steps {
        sh 'mvn clean verify -DskipITs'
      }
    }

    stage('SonarQube Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
          withSonarQubeEnv('SonarQube') {
            sh """
              mvn sonar:sonar \
                -Dsonar.projectKey=${APP_NAME} \
                -Dsonar.login=${SONAR_TOKEN}
            """
          }
        }
      }
    }

    stage('Quality Gate') {
      steps {
        timeout(time: 2, unit: 'MINUTES') {
          waitForQualityGate abortPipeline: true
        }
      }
    }

    stage('Build & Push Image') {
      steps {
        script {
          env.IMAGE_TAG = sh(
            returnStdout: true,
            script: 'git rev-parse --short HEAD'
          ).trim()
          env.IMAGE = "${IMAGE_ROOT}/${APP_NAME}:${IMAGE_TAG}"

          withCredentials([usernamePassword(
            credentialsId: 'nexus-cred',
            usernameVariable: 'NEXUS_USER',
            passwordVariable: 'NEXUS_PW'
          )]) {
            sh '''
              echo "üõ†  Building $IMAGE"
              docker build --security-opt seccomp=unconfined -t "$IMAGE" .

              echo "üîê  Logging into Nexus (plain HTTP)"
              echo "$NEXUS_PW" | docker login --tls-verify=false \
                --username "$NEXUS_USER" --password-stdin "$REGISTRY_HOST"

              echo "üì§  Pushing $IMAGE"
              docker push --tls-verify=false "$IMAGE"
            '''
          }
        }
      }
    }

    stage('Scans (SCA + DAST)') {
      steps {
        script {
          // We already have IMAGE from the prior stage
          
          // 1) SCA with Trivy
          withCredentials([usernamePassword(
            credentialsId: 'nexus-cred',
            usernameVariable: 'NEXUS_USER',
            passwordVariable: 'NEXUS_PW'
          )]) {
            sh """
              echo "üîé  Trivy scanning $IMAGE"
              trivy image \
                --username "$NEXUS_USER" \
                --password "$NEXUS_PW" \
                --insecure \
                --exit-code 1 \
                --severity HIGH,CRITICAL \
                --ignore-unfixed \
                "$IMAGE"
            """
          }

          // 2) DAST with baked-in ZAP CLI
          sh """
            echo "üõ†  Installing AI-scan add-on in baked ZAP..."
            docker run --rm -u root --network host "$IMAGE" \
              zap.sh -cmd -addoninstall aipscan

            echo "üîé  Running DAST full scan against $DEV_URL..."
            docker run --rm -u root --network host "$IMAGE" \
              zap-full-scan.py \
                -t ${DEV_URL} \
                -r dap-results.html \
                -x dap-results.xml \
                -z "-config aipscan.maxConfidenceLevel=Medium" \
                -z "-config aipscan.maxAlertThreshold=Low"
          """
        }
      }
      post {
        always {
          archiveArtifacts artifacts: 'dap-results.html,dap-results.xml', fingerprint: true
        }
        failure {
          script {
            if (fileExists('dap-results.xml')) {
              def xml = readFile('dap-results.xml').toLowerCase()
              if (xml.contains('riskdesc="high"') || xml.contains('riskdesc="medium"')) {
                error "‚õî DAST found Medium/High issues ‚Äî failing build."
              }
            } else {
              echo "‚ö†Ô∏è  dap-results.xml not found; skipping DAST severity check."
            }
          }
        }
      }
    }

    stage('Deploy to DEV') {
      steps {
        sh '''
          echo "üöÄ  Deploying $APP_NAME:${IMAGE_TAG} to dev"
          helm upgrade --install "$APP_NAME" chart \
            --namespace dev --create-namespace \
            --set image.repository=$IMAGE_ROOT/$APP_NAME \
            --set image.tag=$IMAGE_TAG \
            --set imagePullSecrets[0].name=nexus-pull \
            --set service.type=NodePort \
            --set service.nodePort=32007
        '''
      }
    }

    stage('Approval to PROD') {
      steps {
        input message: "Deploy ${APP_NAME}:${IMAGE_TAG} to PROD?"
      }
    }

    stage('Deploy to PROD') {
      steps {
        sh '''
          echo "üöÄ  Deploying $APP_NAME:${IMAGE_TAG} to prod"
          helm upgrade --install "$APP_NAME" chart \
            --namespace prod --create-namespace \
            --set image.repository=$IMAGE_ROOT/$APP_NAME \
            --set image.tag=$IMAGE_TAG \
            --set imagePullSecrets[0].name=nexus-pull \
            --set service.type=NodePort \
            --set service.nodePort=32008
        '''
      }
    }
  }

  post {
    always { cleanWs() }
    success {
      mail(
        to:      env.GIT_COMMITTER_EMAIL ?: 'team@example.com',
        subject: "${env.JOB_NAME} #${env.BUILD_NUMBER} SUCCESS ‚úÖ",
        body:    "Your build succeeded! ${env.BUILD_URL}"
      )
    }
    failure {
      mail(
        to:      env.GIT_COMMITTER_EMAIL ?: 'team@example.com',
        subject: "${env.JOB_NAME} #${env.BUILD_NUMBER} FAILURE ‚ùå",
        body:    "Build failed. See console: ${env.BUILD_URL}"
      )
    }
  }
}
