pipeline {
  agent{
label 'kubernetes'
}
  environment {
    // Ensure Docker client talks to DinD container
    DOCKER_HOST = 'tcp://localhost:2375'
  }
  stages {
    stage('Checkout') {
      steps {
        container('maven') {
          checkout scm
        }
      }
    }

    stage('Build with Maven') {
      steps {
        container('maven') {
          sh 'mvn clean install -DskipTests'
        }
      }
    }

    stage('Run Tests') {
      steps {
        container('maven') {
          sh 'mvn test'
        }
      }
    }

    stage('Docker Build') {
      steps {
        container('maven') {
          sh '''
            echo "Docker Version:"
            docker version

            echo "Building Docker image..."
            docker build -t my-image:latest .
          '''
        }
      }
    }

    stage('Push Docker Image (optional)') {
      when {
        expression { return env.DOCKER_USERNAME && env.DOCKER_PASSWORD }
      }
      steps {
        container('maven') {
          withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
            sh '''
              echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
              docker push my-image:latest
            '''
          }
        }
      }
    }
  }

  post {
    always {
      container('maven') {
        sh 'echo "Pipeline completed. Cleaning up..."'
      }
    }
    failure {
      container('maven') {
        sh 'echo "Pipeline failed."'
      }
    }
  }
}
