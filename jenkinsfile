pipeline {
  agent { label 'jenkins-agent' }

  environment {
    APP_NAME      = 'devsecops2-challenge'
    REGISTRY_HOST = '10.25.157.175:32030'
    IMAGE_ROOT    = "${REGISTRY_HOST}/docker-hosted"
  }

  stages {
    stage('Checkout') {
      steps {
        git url:           'https://github.com/pranesh6hpe/devsecops2-challenge.git',
            branch:        'main',
            credentialsId: 'git-https'
      }
    }

    stage('Build & Test') {
      steps {
        sh 'mvn clean verify -DskipITs'
      }
    }

    stage('SonarQube Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
          withSonarQubeEnv('SonarQube') {
            sh '''
              mvn sonar:sonar \
                -Dsonar.projectKey=${APP_NAME} \
                -Dsonar.login=${SONAR_TOKEN}
            '''
          }
        }
      }
    }

    stage('Quality Gate') {
      steps {
        timeout(time: 2, unit: 'MINUTES') {
          waitForQualityGate abortPipeline: true
        }
      }
    }

    stage('Build & Push Image') {
      steps {
        script {
          env.IMAGE_TAG = sh(
            returnStdout: true,
            script: 'git rev-parse --short HEAD'
          ).trim()
          env.IMAGE = "${IMAGE_ROOT}/${APP_NAME}:${IMAGE_TAG}"

          withCredentials([usernamePassword(
            credentialsId: 'nexus-cred',
            usernameVariable: 'NEXUS_USER',
            passwordVariable: 'NEXUS_PW'
          )]) {
            sh '''
              echo "üõ†  Building $IMAGE"
              docker build --security-opt seccomp=unconfined -t "$IMAGE" .

              echo "üîê  Logging into Nexus (plain HTTP)"
              echo "$NEXUS_PW" | docker login --tls-verify=false \
                   --username "$NEXUS_USER" --password-stdin "$REGISTRY_HOST"

              echo "üì§  Pushing $IMAGE"
              docker push --tls-verify=false "$IMAGE"
            '''
          }
        }
      }
    }

    stage('Trivy Image Scan') {
      steps {
        script {
          withCredentials([usernamePassword(
            credentialsId: 'nexus-cred',
            usernameVariable: 'NEXUS_USER',
            passwordVariable: 'NEXUS_PW'
          )]) {
            sh '''
              IMAGE=${IMAGE_ROOT}/${APP_NAME}:${IMAGE_TAG}

              echo "üîé  Trivy scanning $IMAGE"
              trivy image \
                --username  "$NEXUS_USER" \
                --password  "$NEXUS_PW" \
                --insecure \
                --ignore-unfixed \
                --severity HIGH,CRITICAL \
                --exit-code 1 \
                "$IMAGE"
            '''
          }
        }
      }
    }

    stage('Collect Trivy Reports') {
      steps {
        sh '''
          # Operator-level reports
          kubectl -n trivy-system get vulnerabilityreports.aquasecurity.github.io -o yaml \
            > vulnerability-reports.yaml
          kubectl -n trivy-system get configauditreports.aquasecurity.github.io -o yaml \
            > configaudit-reports.yaml

          # (Optional) namespace-scoped reports in "dev"
          kubectl -n dev get vulnerabilityreports.aquasecurity.github.io -o yaml \
            >> vulnerability-reports.yaml || true
          kubectl -n dev get configauditreports.aquasecurity.github.io -o yaml \
            >> configaudit-reports.yaml    || true

          # Combine into a single file
          echo '---' > combined-trivy-report.yaml
          cat vulnerability-reports.yaml   >> combined-trivy-report.yaml
          echo '---'                      >> combined-trivy-report.yaml
          cat configaudit-reports.yaml    >> combined-trivy-report.yaml
        '''
        archiveArtifacts artifacts: '*.yaml', fingerprint: true
      }
    }

    stage('Deploy to DEV') {
      steps {
        sh '''
          echo "üöÄ  Deploying $APP_NAME:${IMAGE_TAG} to dev"
          helm upgrade --install "$APP_NAME" chart \
            --namespace dev \
            --create-namespace \
            --set image.repository=$IMAGE_ROOT/$APP_NAME \
            --set image.tag=$IMAGE_TAG \
            --set imagePullSecrets[0].name=nexus-pull \
            --set service.type=NodePort \
            --set service.nodePort=32007
        '''
      }
    }

    stage('Approval to PROD') {
      steps {
        input message: "Deploy ${APP_NAME}:${IMAGE_TAG} to PROD?"
      }
    }

    stage('Deploy to PROD') {
      steps {
        sh '''
          echo "üöÄ  Deploying $APP_NAME:${IMAGE_TAG} to prod"
          helm upgrade --install "$APP_NAME" chart \
            --namespace prod \
            --create-namespace \
            --set image.repository=$IMAGE_ROOT/$APP_NAME \
            --set image.tag=$IMAGE_TAG \
            --set imagePullSecrets[0].name=nexus-pull \
            --set service.type=NodePort \
            --set service.nodePort=32008
        '''
      }
    }
  }

  post {
  always {
    cleanWs()
  }

  success {
    script {
      def gitEmail = env.GIT_COMMITTER_EMAIL ?: 'default-team@example.com'
      mail to: gitEmail,
           subject: "${env.JOB_NAME} - Build #${env.BUILD_NUMBER} - SUCCESS ‚úÖ",
           body: """\
Good news! The build was successful.

Project: ${env.JOB_NAME}
Build Number: ${env.BUILD_NUMBER}
Status: SUCCESS ‚úÖ

Check it here: ${env.BUILD_URL}
"""
    }
  }

  failure {
    script {
      def gitEmail = env.GIT_COMMITTER_EMAIL ?: 'default-team@example.com'
      mail to: gitEmail,
           subject: "${env.JOB_NAME} - Build #${env.BUILD_NUMBER} - FAILED ‚ùå",
           body: """\
Unfortunately, the build has failed.

Project: ${env.JOB_NAME}
Build Number: ${env.BUILD_NUMBER}
Status: FAILED ‚ùå

Check the console output for more details: ${env.BUILD_URL}
"""
    }
  }
}

}
