pipeline {
  agent { label 'jenkins-agent' }

  environment {
    APP_NAME      = 'devsecops2-challenge'
    REGISTRY_HOST = '10.25.157.175:32030'
    IMAGE_ROOT    = "${REGISTRY_HOST}/docker-hosted"
  }

  stages {
    stage('Checkout') {
      steps {
        echo "üîç Checking out source from Git"
        git url:           'https://github.com/pranesh6hpe/devsecops2-challenge.git',
            branch:        'main',
            credentialsId: 'git-https'
        echo "‚úÖ Checkout complete"
      }
    }

    stage('Build & Test') {
      steps {
        echo "üõ† Building and running unit tests"
        sh 'mvn clean verify -DskipITs'
        echo "‚úÖ Build & Test successful"
      }
    }

    stage('SonarQube Analysis') {
      steps {
        echo "üîé Starting SonarQube analysis"
        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
          withSonarQubeEnv('SonarQube') {
            sh '''
              mvn sonar:sonar \
                -Dsonar.projectKey=${APP_NAME} \
                -Dsonar.token=${SONAR_TOKEN}
            '''
          }
        }
        echo "‚úÖ SonarQube scan triggered"
      }
    }

    stage('Quality Gate') {
      steps {
        echo "‚è± Waiting for SonarQube quality gate"
        timeout(time: 2, unit: 'MINUTES') {
          waitForQualityGate abortPipeline: true
        }
        echo "‚úÖ Quality gate passed"
      }
    }

   stage('Build and Push Image') {
  steps {
    script {
      withCredentials([usernamePassword(
        credentialsId: 'nexus-cred',
        usernameVariable: 'NEXUS_USER',
        passwordVariable: 'NEXUS_PW'
      )]) {

        echo "üõ† Building Docker image"
        sh 'docker build -t "$IMAGE" .'

        echo "üìú Creating Podman insecure registry config"
        sh '''
          mkdir -p $WORKSPACE/.config/containers
          cat <<EOF > $WORKSPACE/.config/containers/registries.conf
[registries.insecure]
registries = ["${REGISTRY_HOST}"]
EOF
        '''

        echo "üîê Logging into registry (HTTP)"
        sh '''
          export REGISTRIES_CONF=$WORKSPACE/.config/containers/registries.conf
          echo "$NEXUS_PW" | docker --config=$WORKSPACE/.config login --username "$NEXUS_USER" --password-stdin http://$REGISTRY_HOST
        '''

        echo "üì§ Pushing image to registry"
        sh 'docker --config=$WORKSPACE/.config push "$IMAGE"'
      }
    }
  }
}


    stage('Trivy Image Scan') {
      steps {
        echo "üîé Starting Trivy vulnerability scan"
        script {
          withCredentials([usernamePassword(
            credentialsId: 'nexus-cred',
            usernameVariable: 'NEXUS_USER',
            passwordVariable: 'NEXUS_PW'
          )]) {
            sh '''
              IMAGE=${IMAGE_ROOT}/${APP_NAME}:${IMAGE_TAG}
              echo "üì• Pulling image before scan"
              docker pull "$IMAGE"

              echo "üß™ Running Trivy scan"
              trivy image \
                --username  "$NEXUS_USER" \
                --password  "$NEXUS_PW" \
                --insecure \
                --ignore-unfixed \
                --severity HIGH,CRITICAL \
                --exit-code 1 \
                "$IMAGE"
            '''
          }
        }
        echo "‚úÖ Trivy scan complete"
      }
    }

    stage('Collect Trivy Reports') {
      steps {
        echo "üìÑ Collecting Trivy operator reports"
        sh '''
          kubectl -n trivy-system get vulnerabilityreports.aquasecurity.github.io -o yaml > vulnerability-reports.yaml
          kubectl -n trivy-system get configauditreports.aquasecurity.github.io -o yaml   > configaudit-reports.yaml
          kubectl -n dev get vulnerabilityreports.aquasecurity.github.io -o yaml          >> vulnerability-reports.yaml || true
          kubectl -n dev get configauditreports.aquasecurity.github.io -o yaml            >> configaudit-reports.yaml  || true

          echo '---' > combined-trivy-report.yaml
          cat vulnerability-reports.yaml   >> combined-trivy-report.yaml
          echo '---'                      >> combined-trivy-report.yaml
          cat configaudit-reports.yaml    >> combined-trivy-report.yaml
        '''
        archiveArtifacts artifacts: '*.yaml', fingerprint: true
        echo "‚úÖ Trivy reports archived"
      }
    }

    stage('Deploy to DEV') {
      steps {
        echo "üöÄ Deploying to DEV namespace"
        sh '''
          helm upgrade --install "${APP_NAME}" chart \
            --namespace dev --create-namespace \
            --set image.repository=${IMAGE_ROOT}/${APP_NAME} \
            --set image.tag=${IMAGE_TAG} \
            --set imagePullSecrets[0].name=nexus-pull \
            --set service.type=NodePort \
            --set service.nodePort=32007
        '''
        echo "‚úÖ Deployed to DEV"
      }
    }

    stage('Approval to PROD') {
      steps {
        echo "üîî Awaiting manual approval to PROD"
        input message: "Deploy ${APP_NAME}:${IMAGE_TAG} to PROD?"
      }
    }

    stage('Deploy to PROD') {
      steps {
        echo "üöÄ Deploying to PROD namespace"
        sh '''
          helm upgrade --install "${APP_NAME}" chart \
            --namespace prod --create-namespace \
            --set image.repository=${IMAGE_ROOT}/${APP_NAME} \
            --set image.tag=${IMAGE_TAG} \
            --set imagePullSecrets[0].name=nexus-pull \
            --set service.type=NodePort \
            --set service.nodePort=32008
        '''
        echo "‚úÖ Deployed to PROD"
      }
    }
  }

  post {
    always {
      echo "üßπ Cleaning up workspace"
      cleanWs()
    }
    success {
      echo "üì¨ Sending success email"
      script {
        def gitEmail = env.GIT_COMMITTER_EMAIL ?: 'default-team@example.com'
        mail to: gitEmail,
             subject: "${env.JOB_NAME} #${env.BUILD_NUMBER} SUCCESS ‚úÖ",
             body: "Good news! Build succeeded. See ${env.BUILD_URL}"
      }
    }
    failure {
      echo "üì¨ Sending failure email"
      script {
        def gitEmail = env.GIT_COMMITTER_EMAIL ?: 'default-team@example.com'
        mail to: gitEmail,
             subject: "${env.JOB_NAME} #${env.BUILD_NUMBER} FAILED ‚ùå",
             body: "Build failed. Check console output: ${env.BUILD_URL}"
      }
    }
  }
}
