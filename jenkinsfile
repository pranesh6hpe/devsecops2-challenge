pipeline {
  agent { label 'kubernetes' }     // uses the K8s cloud you configured

  environment {
    REGISTRY = '10.25.157.175:32003'       // Nexus NodePort
    IMAGE    = "${REGISTRY}/dev/my-app:${env.BUILD_NUMBER}"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm     // plugin injects git-https PAT automatically
      }
    }
stage('Build & Test') {
  steps {
    sh 'mvn -B clean verify'
  }
}

    stage('SonarQube Scan') {
      environment {
        SONAR_HOST_URL = 'http://10.25.157.175:32005'   // Sonar NodePort
      }
      steps {
        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
          sh 'sonar-scanner -Dsonar.login=$SONAR_TOKEN'
        }
      }
    }

    stage('Build & Push') {
      steps {
        script {
          docker.build('my-app')          // Dockerfile in repo
        }
        withCredentials([usernamePassword(credentialsId: 'docker-cred',
                          usernameVariable: 'DOCKER_USER',
                          passwordVariable: 'DOCKER_PASS')]) {
          sh '''
            echo "$DOCKER_PASS" | docker login $REGISTRY -u $DOCKER_USER --password-stdin
            docker tag my-app $IMAGE
            docker push $IMAGE
          '''
        }
      }
    }

    stage('Deploy to dev') {
      steps {
        withCredentials([file(credentialsId: 'ci-jenkins-kubeconfig', variable: 'KUBECONF')]) {
          sh '''
            export KUBECONFIG=$KUBECONF
            kubectl -n dev set image deployment/my-app my-app=$IMAGE --record
          '''
        }
      }
    }

  }
}
