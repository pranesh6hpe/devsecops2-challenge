pipeline {
  /*--------------------------------------------------------------
  | 1.  where the job runs
  *-------------------------------------------------------------*/
  agent { label 'jenkins-agent' }

  /*--------------------------------------------------------------
  | 2.  global variables
  *-------------------------------------------------------------*/
  environment {
    APP_NAME      = 'devsecops2-challenge'

    /* Nexus registry (HTTP -> port 32030) */
    REGISTRY_HOST = '10.25.157.175:32030'
    IMAGE_ROOT    = "${REGISTRY_HOST}/docker-hosted"
  }

  /*--------------------------------------------------------------
  | 3.  pipeline stages
  *-------------------------------------------------------------*/
  stages {
    /* ────────────────────────────────────────────────────────── */
    stage('Checkout') {
      steps {
        git url: 'https://github.com/pranesh6hpe/devsecops2-challenge.git',
            branch: 'main',
            credentialsId: 'git-https'
      }
    }

    /* ────────────────────────────────────────────────────────── */
    stage('Build & Test') {
      steps {
        sh 'mvn clean verify -DskipITs'
      }
    }

    /* ────────────────────────────────────────────────────────── */
    stage('SonarQube Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonar-token',
                               variable:      'SONAR_TOKEN')]) {
          withSonarQubeEnv('SonarQube') {
            sh '''
              mvn sonar:sonar                       \
                -Dsonar.projectKey=${APP_NAME}      \
                -Dsonar.login=${SONAR_TOKEN}
            '''
          }
        }
      }
    }

    /* ────────────────────────────────────────────────────────── */
    stage('Quality Gate') {
      steps {
        timeout(time: 2, unit: 'MINUTES') {
          waitForQualityGate abortPipeline: true
        }
      }
    }

    /* ────────────────────────────────────────────────────────── */
    stage('Build & Push Image') {
      steps {
        script {
          /* short Git SHA for the tag */
          env.IMAGE_TAG = sh(returnStdout: true,
                             script: 'git rev-parse --short HEAD').trim()
          env.IMAGE = "${IMAGE_ROOT}/${APP_NAME}:${IMAGE_TAG}"

          withCredentials([usernamePassword(credentialsId: 'nexus-cred',
                                            usernameVariable: 'NEXUS_USER',
                                            passwordVariable: 'NEXUS_PW')]) {
            sh '''
              echo "🛠  Building $IMAGE"
              docker build --security-opt seccomp=unconfined -t "$IMAGE" .

              echo "🔐  Logging into Nexus (plain HTTP)"
              echo "$NEXUS_PW" | docker login --tls-verify=false \
                   --username "$NEXUS_USER" --password-stdin "$REGISTRY_HOST"

              echo "📤  Pushing $IMAGE"
              docker push --tls-verify=false "$IMAGE"
            '''
          }
        }
      }
    }

    /* ────────────────────────────────────────────────────────── */
    stage('Trivy Image Scan') {
      steps {
        script {
          withCredentials([usernamePassword(credentialsId: 'nexus-cred',
                                            usernameVariable: 'NEXUS_USER',
                                            passwordVariable: 'NEXUS_PW')]) {
            sh '''
              IMAGE=${IMAGE_ROOT}/${APP_NAME}:${IMAGE_TAG}

              echo "🔎  Trivy scanning $IMAGE"
              trivy image                              \
                --username  "$NEXUS_USER"              \
                --password  "$NEXUS_PW"                \
                --insecure                             \
                --ignore-unfixed                       \
                --severity HIGH,CRITICAL               \
                --exit-code 1                          \
                "$IMAGE"
            '''
          }
        }
      }
    }

    /* ────────────────────────────────────────────────────────── */
    stage('Deploy to DEV') {
      steps {
        sh '''
          echo "🚀  helm upgrade --install $APP_NAME (tag $IMAGE_TAG)"
          helm upgrade --install "$APP_NAME" chart          \
            --namespace devsecops2                          \
            --set image.repository=$IMAGE_ROOT/$APP_NAME    \
            --set image.tag=$IMAGE_TAG                      \
            --set imagePullSecrets[0].name=nexus-pull
        '''
      }
    }
  }

  /*--------------------------------------------------------------
  | 4.  always run after the pipeline
  *-------------------------------------------------------------*/
  post {
    always { cleanWs() }   // wipe the workspace on success OR failure
  }
}
