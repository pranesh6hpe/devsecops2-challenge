pipeline {
  agent { label 'jenkins-agent' }

  environment {
    APP_NAME      = 'devsecops2-challenge'
    REGISTRY_HOST = '10.25.157.175:32030'
    IMAGE_ROOT    = "${REGISTRY_HOST}/docker-hosted"
  }

  stages {

    /* ──────────────────────────  SOURCE + BUILD  ────────────────────────── */
    stage('Checkout') {
      steps {
        git url: 'https://github.com/pranesh6hpe/devsecops2-challenge.git',
            branch: 'main',
            credentialsId: 'git-https'
      }
    }

    stage('Build & Test') {
      steps {
        sh 'mvn clean verify -DskipITs'
      }
    }

  



    /* ──────────────────────────  SONAR  ────────────────────────── */
    stage('SonarQube Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
          withSonarQubeEnv('SonarQube') {
            sh '''
              mvn sonar:sonar \
                -Dsonar.projectKey=${APP_NAME} \
                -Dsonar.token=${SONAR_TOKEN}
            '''
          }
        }
      }
    }

    stage('Quality Gate') {
      steps {
        timeout(time: 2, unit: 'MINUTES') {
          waitForQualityGate abortPipeline: true
        }
      }
    }

    /* ──────────────────────────  BUILD IMAGE  ────────────────────────── */
    stage('Build & Push Image') {
      steps {
        script {
          env.IMAGE_TAG = sh(
            returnStdout: true,
            script: 'git rev-parse --short HEAD'
          ).trim()
          env.IMAGE = "${IMAGE_ROOT}/${APP_NAME}:${IMAGE_TAG}"

          withCredentials([usernamePassword(
            credentialsId: 'nexus-cred',
            usernameVariable: 'NEXUS_USER',
            passwordVariable: 'NEXUS_PW'
          )]) {
            sh '''
              echo "🛠  Building $IMAGE"
              docker build --security-opt seccomp=unconfined -t "$IMAGE" .

              echo "🔐  Logging into Nexus (plain HTTP)"
              echo "$NEXUS_PW" | docker login --tls-verify=false \
                   --username "$NEXUS_USER" --password-stdin "$REGISTRY_HOST"

              echo "📤  Pushing $IMAGE"
              docker push --tls-verify=false "$IMAGE"
            '''
          }
        }
      }
    }

    /* ──────────────────────────  TRIVY IMAGE SCAN  ────────────────────────── */
    stage('Trivy Image Scan') {
      steps {
        script {
          withCredentials([usernamePassword(
            credentialsId: 'nexus-cred',
            usernameVariable: 'NEXUS_USER',
            passwordVariable: 'NEXUS_PW'
          )]) {
            sh '''
              IMAGE=${IMAGE_ROOT}/${APP_NAME}:${IMAGE_TAG}

              echo "🔎  Trivy scanning $IMAGE"
              trivy image \
                --username  "$NEXUS_USER" \
                --password  "$NEXUS_PW" \
                --insecure \
                --ignore-unfixed \
                --severity HIGH,CRITICAL \
                --exit-code 1 \
                "$IMAGE"
            '''
          }
        }
      }
    }

    /* ──────────────────────────  COLLECT OPERATOR REPORTS  ────────────────────────── */
    stage('Collect Trivy Reports') {
      steps {
        sh '''
          # Operator-level reports
          kubectl -n trivy-system get vulnerabilityreports.aquasecurity.github.io -o yaml \
            > vulnerability-reports.yaml
          kubectl -n trivy-system get configauditreports.aquasecurity.github.io -o yaml \
            > configaudit-reports.yaml

          # (Optional) namespace-scoped reports in "dev"
          kubectl -n dev get vulnerabilityreports.aquasecurity.github.io -o yaml \
            >> vulnerability-reports.yaml || true
          kubectl -n dev get configauditreports.aquasecurity.github.io -o yaml \
            >> configaudit-reports.yaml    || true

          # Combine into a single file
          echo '---' > combined-trivy-report.yaml
          cat vulnerability-reports.yaml >> combined-trivy-report.yaml
          echo '---'                     >> combined-trivy-report.yaml
          cat configaudit-reports.yaml   >> combined-trivy-report.yaml
        '''
        archiveArtifacts artifacts: '*.yaml', fingerprint: true
      }
    }

/* ───────────────  AI Release Notes (Groq)  ─────────────── */
stage('AI Release Notes (Groq)') {
  when { expression { currentBuild.currentResult == 'SUCCESS' } }
  steps {
    withCredentials([string(credentialsId: 'groq-key',
                            variable: 'GROQ_API_KEY')]) {

      sh '''
        set -e
        # 1) Grab the last 200 commit lines that constitute this build
        git --no-pager log -n 200 --pretty=format:"%h %<(70,trunc)%s" > commits.txt

        # 2) Use Groq’s OpenAI-compatible endpoint to turn them into Markdown
        python3 - <<'PY'
import os, textwrap, pathlib, openai

# --- Groq client ------------------------------------------------------------
client = openai.OpenAI(
    base_url = "https://api.groq.com/openai/v1",      # :contentReference[oaicite:0]{index=0}
    api_key  = os.environ["GROQ_API_KEY"]
)

# --- read git commits -------------------------------------------------------
commits_file = pathlib.Path("commits.txt")
if not commits_file.exists() or not commits_file.read_text().strip():
    print("No commits found – skipping AI release notes"); exit(0)
commits = commits_file.read_text()

# --- prompt -----------------------------------------------------------------
SYSTEM = textwrap.dedent(\"\"\"\
You are an expert release-notes writer.
Turn the commit list into concise, human-readable release notes:
• Group similar changes
• Skip merge/chore commits
• ≤ 200 words
Return valid Markdown starting with “### Highlights”
\"\"\")
USER = f"Git commits since last release:\\n```\\n{commits}\\n```"

# --- call Groq --------------------------------------------------------------
resp = client.chat.completions.create(               # OpenAI-v1 style :contentReference[oaicite:1]{index=1}
    model       = "mixtral-8x7b-chat",               # fast, \~8 ¢ / M-tokens :contentReference[oaicite:2]{index=2}
    temperature = 0.3,
    messages    = [
        {"role":"system","content": SYSTEM},
        {"role":"user",  "content": USER}
    ]
)

notes = resp.choices[0].message.content.strip()
print("\\n===== AI-Generated Release Notes =====\\n")
print(notes)
pathlib.Path("release-notes.md").write_text(notes + "\\n")
PY
      '''
      archiveArtifacts artifacts: 'release-notes.md', fingerprint: true
    }
  }
}





    /* ──────────────────────────  DEPLOY DEV  ────────────────────────── */
    stage('Deploy to DEV') {
      steps {
        sh '''
          echo "🚀  Deploying $APP_NAME:${IMAGE_TAG} to dev"
          helm upgrade --install "$APP_NAME" chart \
            --namespace dev \
            --create-namespace \
            --set image.repository=$IMAGE_ROOT/$APP_NAME \
            --set image.tag=$IMAGE_TAG \
            --set imagePullSecrets[0].name=nexus-pull \
            --set service.type=NodePort \
            --set service.nodePort=32007
        '''
      }
    }

    /* ──────────────────────────  APPROVAL + PROD  ────────────────────────── */
    stage('Approval to PROD') {
      steps {
        input message: "Deploy ${APP_NAME}:${IMAGE_TAG} to PROD?"
      }
    }

    stage('Deploy to PROD') {
      steps {
        sh '''
          echo "🚀  Deploying $APP_NAME:${IMAGE_TAG} to prod"
          helm upgrade --install "$APP_NAME" chart \
            --namespace prod \
            --create-namespace \
            --set image.repository=$IMAGE_ROOT/$APP_NAME \
            --set image.tag=$IMAGE_TAG \
            --set imagePullSecrets[0].name=nexus-pull \
            --set service.type=NodePort \
            --set service.nodePort=32008
        '''
      }
    }
  }

  /* ──────────────────────────  POST ACTIONS  ────────────────────────── */
  post {
    always {
      cleanWs()
    }

    success {
      script {
        def gitEmail = env.GIT_COMMITTER_EMAIL ?: 'default-team@example.com'
        mail to: gitEmail,
             subject: "${env.JOB_NAME} - Build #${env.BUILD_NUMBER} - SUCCESS ✅",
             body: """\
Good news! The build was successful.

Project: ${env.JOB_NAME}
Build Number: ${env.BUILD_NUMBER}
Status: SUCCESS ✅

Check it here: ${env.BUILD_URL}
"""
      }
    }

    failure {
      script {
        def gitEmail = env.GIT_COMMITTER_EMAIL ?: 'default-team@example.com'
        mail to: gitEmail,
             subject: "${env.JOB_NAME} - Build #${env.BUILD_NUMBER} - FAILED ❌",
             body: """\
Unfortunately, the build has failed.

Project: ${env.JOB_NAME}
Build Number: ${env.BUILD_NUMBER}
Status: FAILED ❌

Check the console output for more details: ${env.BUILD_URL}
"""
      }
    }
  }
}
