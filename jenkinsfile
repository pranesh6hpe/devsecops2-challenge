pipeline {
  agent { label 'jenkins-agent' }

  environment {
    APP_NAME      = 'devsecops2-challenge'
    REGISTRY_HOST = '10.25.157.175:32030'
    IMAGE_ROOT    = "${REGISTRY_HOST}/docker-hosted"
  }

  stages {

    /* ──────────────────────────  SOURCE + BUILD  ────────────────────────── */
    stage('Checkout') {
      steps {
        git url: 'https://github.com/pranesh6hpe/devsecops2-challenge.git',
            branch: 'main',
            credentialsId: 'git-https'
      }
    }

    stage('Build & Test') {
      steps {
        sh 'mvn clean verify -DskipITs'
      }
    }

    /* ──────────────────────────  SONAR  ────────────────────────── */
    stage('SonarQube Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
          withSonarQubeEnv('SonarQube') {
            sh '''
              mvn sonar:sonar \
                -Dsonar.projectKey=${APP_NAME} \
                -Dsonar.token=${SONAR_TOKEN}
            '''
          }
        }
      }
    }

    stage('Quality Gate') {
      steps {
        timeout(time: 2, unit: 'MINUTES') {
          waitForQualityGate abortPipeline: true
        }
      }
    }

    /* ──────────────────────────  BUILD IMAGE  ────────────────────────── */
    stage('Build & Push Image') {
      steps {
        script {
          env.IMAGE_TAG = sh(
            returnStdout: true,
            script: 'git rev-parse --short HEAD'
          ).trim()
          env.IMAGE = "${IMAGE_ROOT}/${APP_NAME}:${IMAGE_TAG}"

          withCredentials([usernamePassword(
            credentialsId: 'nexus-cred',
            usernameVariable: 'NEXUS_USER',
            passwordVariable: 'NEXUS_PW'
          )]) {
            sh '''
              echo "🛠  Building $IMAGE"
              docker build --security-opt seccomp=unconfined -t "$IMAGE" .

              echo "🔐  Logging into Nexus (plain HTTP)"
              echo "$NEXUS_PW" | docker login --tls-verify=false \
                   --username "$NEXUS_USER" --password-stdin "$REGISTRY_HOST"

              echo "📤  Pushing $IMAGE"
              docker push --tls-verify=false "$IMAGE"
            '''
          }
        }
      }
    }

    /* ──────────────────────────  TRIVY IMAGE SCAN  ────────────────────────── */
    stage('Trivy Image Scan') {
      steps {
        script {
          withCredentials([usernamePassword(
            credentialsId: 'nexus-cred',
            usernameVariable: 'NEXUS_USER',
            passwordVariable: 'NEXUS_PW'
          )]) {
            sh '''
              IMAGE=${IMAGE_ROOT}/${APP_NAME}:${IMAGE_TAG}

              echo "🔎  Trivy scanning $IMAGE"
              trivy image \
                --username  "$NEXUS_USER" \
                --password  "$NEXUS_PW" \
                --insecure \
                --ignore-unfixed \
                --severity HIGH,CRITICAL \
                --exit-code 1 \
                "$IMAGE"
            '''
          }
        }
      }
    }

    /* ──────────────────────────  COLLECT OPERATOR REPORTS  ────────────────────────── */
    stage('Collect Trivy Reports') {
      steps {
        sh '''
          # Operator-level reports
          kubectl -n trivy-system get vulnerabilityreports.aquasecurity.github.io -o yaml \
            > vulnerability-reports.yaml
          kubectl -n trivy-system get configauditreports.aquasecurity.github.io -o yaml \
            > configaudit-reports.yaml

          # (Optional) namespace-scoped reports in "dev"
          kubectl -n dev get vulnerabilityreports.aquasecurity.github.io -o yaml \
            >> vulnerability-reports.yaml || true
          kubectl -n dev get configauditreports.aquasecurity.github.io -o yaml \
            >> configaudit-reports.yaml    || true

          # Combine into a single file
          echo '---' > combined-trivy-report.yaml
          cat vulnerability-reports.yaml >> combined-trivy-report.yaml
          echo '---'                     >> combined-trivy-report.yaml
          cat configaudit-reports.yaml   >> combined-trivy-report.yaml
        '''
        archiveArtifacts artifacts: '*.yaml', fingerprint: true
      }
    }


       /* ──────────────────────────  AI TRIAGE WITH GEMINI  ────────────────────────── */
    stage('AI Vulnerability Triage (Gemini)') {
      steps {
        withCredentials([string(credentialsId: 'gemini-key', variable: 'GEMINI_API_KEY')]) {
          sh '''
            # Expose the key as expected by google-genai
            export GOOGLE_API_KEY="$GEMINI_API_KEY"

            python3 - <<'PY'
import os, sys, subprocess, json, yaml, pathlib, textwrap, itertools

# 1) Install / upgrade the new Google GenAI SDK
subprocess.run(
    [sys.executable, "-m", "pip", "install", "--quiet", "--user", "google-genai>=0.8.0"],
    check=True)

from google import genai
from google.genai import types

# 2) Read combined-trivy-report.yaml
fp = pathlib.Path("combined-trivy-report.yaml")
if not fp.exists():
    print("❌  combined-trivy-report.yaml not found"); sys.exit(1)

docs = list(yaml.safe_load_all(fp.read_text()))
reports = [d for d in docs if isinstance(d, dict) and d.get("kind") == "VulnerabilityReport"]
reports += [
    item for d in docs if isinstance(d, dict) and "items" in d
    for item in d["items"]
    if isinstance(item, dict) and item.get("kind") == "VulnerabilityReport"
]

vulns = [v for r in reports for v in r.get("report", {}).get("vulnerabilities", [])]
crit  = [v for v in vulns if str(v.get("severity")).upper() in ("HIGH", "CRITICAL")]

print(f"🔎 VulnerabilityReports : {len(reports)}")
print(f"🔎 Vulnerabilities      : {len(vulns)}")
print(f"🔎 HIGH/CRITICAL        : {len(crit)}")

if not crit:
    print("👍  No HIGH/CRITICAL findings — skipping Gemini triage."); sys.exit(0)

# 3) Build prompt — send **only the first 200 lines** of JSON
full_json   = json.dumps(crit, indent=2)
json_lines  = full_json.splitlines()[:200]          # keep ≤ 200 lines
payload_json = "\n".join(json_lines)

system_prompt = textwrap.dedent(\"\"\"\
You are a cloud-security expert. Given the JSON array of HIGH/CRITICAL Trivy
findings below:

1. List the 10 most urgent CVEs with a one-line justification each.
2. Suggest the 3 remediation actions that mitigate the largest number of findings.
3. Group duplicates (same package + version) when useful.

Return **strict markdown**:

### Urgent CVEs
| Rank | CVE | Reason |
### Recommended Fixes
1. ...
2. ...
3. ...
\"\"\")

prompt = f\"\"\"{system_prompt}

JSON Findings (first 200 lines):
```json
{payload_json}
```\"\"\"

# 4) Call Gemini (Developer API)
client = genai.Client()                              # uses GOOGLE_API_KEY env-var
model_name = "gemini-1.5-pro-latest"                 # current Pro model

response = client.models.generate_content(
    model=model_name,
    contents=prompt,
    config=types.GenerateContentConfig(
        temperature=0.2,
        max_output_tokens=1024
    ),
)

print("\\n===== Gemini vulnerability triage =====\\n")
print(response.text)
PY
          '''
        }
      }
    }



    /* ──────────────────────────  DEPLOY DEV  ────────────────────────── */
    stage('Deploy to DEV') {
      steps {
        sh '''
          echo "🚀  Deploying $APP_NAME:${IMAGE_TAG} to dev"
          helm upgrade --install "$APP_NAME" chart \
            --namespace dev \
            --create-namespace \
            --set image.repository=$IMAGE_ROOT/$APP_NAME \
            --set image.tag=$IMAGE_TAG \
            --set imagePullSecrets[0].name=nexus-pull \
            --set service.type=NodePort \
            --set service.nodePort=32007
        '''
      }
    }

    /* ──────────────────────────  APPROVAL + PROD  ────────────────────────── */
    stage('Approval to PROD') {
      steps {
        input message: "Deploy ${APP_NAME}:${IMAGE_TAG} to PROD?"
      }
    }

    stage('Deploy to PROD') {
      steps {
        sh '''
          echo "🚀  Deploying $APP_NAME:${IMAGE_TAG} to prod"
          helm upgrade --install "$APP_NAME" chart \
            --namespace prod \
            --create-namespace \
            --set image.repository=$IMAGE_ROOT/$APP_NAME \
            --set image.tag=$IMAGE_TAG \
            --set imagePullSecrets[0].name=nexus-pull \
            --set service.type=NodePort \
            --set service.nodePort=32008
        '''
      }
    }
  }

  /* ──────────────────────────  POST ACTIONS  ────────────────────────── */
  post {
    always {
      cleanWs()
    }

    success {
      script {
        def gitEmail = env.GIT_COMMITTER_EMAIL ?: 'default-team@example.com'
        mail to: gitEmail,
             subject: "${env.JOB_NAME} - Build #${env.BUILD_NUMBER} - SUCCESS ✅",
             body: """\
Good news! The build was successful.

Project: ${env.JOB_NAME}
Build Number: ${env.BUILD_NUMBER}
Status: SUCCESS ✅

Check it here: ${env.BUILD_URL}
"""
      }
    }

    failure {
      script {
        def gitEmail = env.GIT_COMMITTER_EMAIL ?: 'default-team@example.com'
        mail to: gitEmail,
             subject: "${env.JOB_NAME} - Build #${env.BUILD_NUMBER} - FAILED ❌",
             body: """\
Unfortunately, the build has failed.

Project: ${env.JOB_NAME}
Build Number: ${env.BUILD_NUMBER}
Status: FAILED ❌

Check the console output for more details: ${env.BUILD_URL}
"""
      }
    }
  }
}
