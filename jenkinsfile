pipeline {
  agent { label 'jenkins-agent' }

  environment {
    APP_NAME      = 'devsecops2-challenge'

    /* Nexus Docker registry (HTTP) */
    REGISTRY_HOST = '10.25.157.175:32030'
    IMAGE_ROOT    = "${REGISTRY_HOST}/docker-hosted"
  }

  stages {
    stage('Checkout') {
      steps {
        git(
          url:          'https://github.com/pranesh6hpe/devsecops2-challenge.git',
          branch:       'main',
          credentialsId:'git-https'
        )
      }
    }

    stage('Build & Test') {
      steps {
        sh 'mvn clean verify -DskipITs'
      }
    }

    stage('SonarQube Analysis') {
      environment {
        // SonarQube server configured in Jenkins ‚Üí Global Tool Configuration
        SONAR_PROJECT_KEY = "${APP_NAME}"
      }
      steps {
        withCredentials([string(
          credentialsId: 'sonar-token',
          variable:      'SONAR_TOKEN'
        )]) {
          withSonarQubeEnv('SonarQube') {
            sh """
              mvn sonar:sonar \
                -Dsonar.projectKey=$SONAR_PROJECT_KEY \
                -Dsonar.login=$SONAR_TOKEN
            """
          }
        }
      }
    }

    stage('Build & Push Image') {
      steps {
        script {
          /* short SHA tag */
          env.IMAGE_TAG = sh(
            returnStdout: true,
            script: 'git rev-parse --short HEAD'
          ).trim()
          env.IMAGE = "${IMAGE_ROOT}/${APP_NAME}:${IMAGE_TAG}"

          withCredentials([usernamePassword(
            credentialsId: 'nexus-cred',
            usernameVariable: 'NEXUS_USER',
            passwordVariable: 'NEXUS_PW'
          )]) {
            sh '''
              echo "üõ†  Building $IMAGE"
              docker build --security-opt seccomp=unconfined -t "$IMAGE" .

              echo "üîê  Logging into Nexus Docker registry"
              echo "$NEXUS_PW" | docker login --tls-verify=false \
                   --username "$NEXUS_USER" --password-stdin "$REGISTRY_HOST"

              echo "üì§  Pushing $IMAGE"
              docker push --tls-verify=false "$IMAGE"
            '''
          }
        }
      }
    }

    stage('Trivy Image Scan') {
      steps {
        echo "üîç  Scanning $IMAGE for vulnerabilities"
        sh """
          trivy image \
            --exit-code 1 \
            --severity HIGH,CRITICAL \
            --ignore-unfixed \
            $IMAGE
        """
      }
    }

    stage('Deploy to DEV') {
      steps {
        sh '''
          echo "üöÄ  helm upgrade --install $APP_NAME (tag $IMAGE_TAG)"
          helm upgrade --install "$APP_NAME" chart \
            --namespace devsecops2 \
            --set image.repository=$IMAGE_ROOT/$APP_NAME \
            --set image.tag=$IMAGE_TAG \
            --set imagePullSecrets[0].name=nexus-pull
        '''
      }
    }
  }

  post {
    always {
      cleanWs()
    }
  }
}
