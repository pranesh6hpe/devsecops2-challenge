pipeline {
  
  agent { label 'kubernetes' }


  environment {
    REGISTRY   = '10.25.157.175:32003'                 // Nexus Docker repo
    IMAGE      = "${REGISTRY}/dev/my-app:${env.BUILD_NUMBER}"
    DEV_NS     = 'dev'
    PROD_NS    = 'pods'                                // change if needed
    SONAR_HOST_URL = 'http://10.25.157.175:32005'      // Sonar NodePort
  }

  stages {

    stage('Checkout') {
      steps {
        checkout scm                                     // Git PAT handled by git-https
      }
    }

    stage('Build & Test') {
      steps {
        sh 'mvn -B clean verify'                         // compiles + unit tests + JaCoCo
      }
    }

    stage('SonarQube Scan') {
      steps {
        withCredentials([string(credentialsId: 'sonar-token',
                                variable: 'SONAR_TOKEN')]) {
          sh '''
            sonar-scanner                            \
              -Dsonar.login=$SONAR_TOKEN             \
              -Dsonar.projectVersion=$BUILD_NUMBER
          '''
        }
      }
    }

    stage('Build & Push Image') {
      steps {
        script {
          docker.build('my-app')                        // creates local image my-app:latest
        }
        withCredentials([usernamePassword(credentialsId: 'docker-cred',
                                          usernameVariable: 'DOCKER_USER',
                                          passwordVariable: 'DOCKER_PASS')]) {
          sh '''
            echo "$DOCKER_PASS" | docker login $REGISTRY -u $DOCKER_USER --password-stdin
            docker tag my-app $IMAGE
            docker push $IMAGE
          '''
        }
      }
    }

    stage('Deploy to dev') {
      steps {
        withCredentials([file(credentialsId: 'ci-jenkins-kubeconfig',
                              variable: 'KUBECONF')]) {
          sh '''
            export KUBECONFIG=$KUBECONF
            kubectl -n $DEV_NS set image deployment/my-app my-app=$IMAGE --record
            kubectl -n $DEV_NS rollout status deployment/my-app
          '''
        }
      }
    }

    stage('Promote to pods') {
      when { branch 'main' }                            // promote only from main
      steps {
        withCredentials([file(credentialsId: 'ci-jenkins-kubeconfig',
                              variable: 'KUBECONF')]) {
          sh '''
            export KUBECONFIG=$KUBECONF
            kubectl -n $PROD_NS set image deployment/my-app my-app=$IMAGE --record
            kubectl -n $PROD_NS rollout status deployment/my-app
          '''
        }
      }
    }
  }

  
  post {
    always {
      junit 'target/surefire-reports/*.xml'             // surface test results
    }
    success {
      echo 'ðŸŽ‰  Pipeline completed successfully!'
    }
    failure {
      echo 'ðŸš¨  Pipeline failed â€” check above logs.'
    }
  }
}
