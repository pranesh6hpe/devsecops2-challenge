pipeline {
  agent { label 'jenkins-agent' }

  environment {
    APP_NAME      = 'devsecops2-challenge'
    REGISTRY_HOST = '10.25.157.175:32030'
    IMAGE_ROOT    = "${REGISTRY_HOST}/docker-hosted"
    JENKINS_PUBLIC_URL  = 'http://10.25.157.175:32000'
    DEFAULT_RECIPIENTS  = 'g-sai-roopesh@hpe.com'
    

  }

  stages {

    /* ───────────────────────  SOURCE + BUILD  ─────────────────────── */
    stage('Checkout') {
      steps {
        git url: 'https://github.com/pranesh6hpe/devsecops2-challenge.git',
            branch: 'main',
            credentialsId: 'git-https'
        script {
      env.GIT_COMMITTER_EMAIL = sh(
        script: "git --no-pager show -s --format='%ae' HEAD",
        returnStdout: true
      ).trim()
    }
      }
      
    }

    stage('Build & Test') {
      steps {
        sh 'mvn clean verify -DskipITs'
      }
    }

    /* ─────────────────────────────  SONAR  ─────────────────────────── */
    stage('SonarQube Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
          withSonarQubeEnv('SonarQube') {
            sh '''
              mvn sonar:sonar \
                -Dsonar.projectKey=${APP_NAME} \
                -Dsonar.token=${SONAR_TOKEN}
            '''
          }
        }
      }
    }

    stage('Quality Gate') {
      steps {
        timeout(time: 2, unit: 'MINUTES') {
          waitForQualityGate abortPipeline: true
        }
      }
    }

    /* ───────────────────────  BUILD & PUSH IMAGE  ──────────────────── */
    stage('Build & Push Image') {
      steps {
        script {
          env.IMAGE_TAG = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
          env.IMAGE     = "${IMAGE_ROOT}/${APP_NAME}:${IMAGE_TAG}"

          withCredentials([usernamePassword(credentialsId: 'nexus-cred',
                                            usernameVariable: 'NEXUS_USER',
                                            passwordVariable: 'NEXUS_PW')]) {
            sh '''
              echo " Building $IMAGE"
              docker build --security-opt seccomp=unconfined -t "$IMAGE" .

              echo "  Logging into Nexus (plain HTTP)"
              echo "$NEXUS_PW" | docker login --tls-verify=false \
                   --username "$NEXUS_USER" --password-stdin "$REGISTRY_HOST"

              echo "  Pushing $IMAGE"
              docker push --tls-verify=false "$IMAGE"
            '''
          }
        }
      }
    }

    /* ────────────────────────  TRIVY IMAGE SCAN  ───────────────────── */
    stage('Trivy Image Scan') {
      steps {
        script {
          withCredentials([usernamePassword(credentialsId: 'nexus-cred',
                                            usernameVariable: 'NEXUS_USER',
                                            passwordVariable: 'NEXUS_PW')]) {
            sh '''
              IMAGE=${IMAGE_ROOT}/${APP_NAME}:${IMAGE_TAG}
              echo " Trivy scanning $IMAGE"
              trivy image \
                --username  "$NEXUS_USER" \
                --password  "$NEXUS_PW" \
                --insecure \
                --ignore-unfixed \
                --severity HIGH,CRITICAL \
                --exit-code 1 \
                "$IMAGE"
            '''
          }
        }
      }
    }

    /* ────────────────  COLLECT TRIVY OPERATOR REPORTS  ─────────────── */
    stage('Collect Trivy Reports') {
      steps {
        sh '''
          kubectl -n trivy-system get vulnerabilityreports.aquasecurity.github.io -o yaml > vulnerability-reports.yaml
          kubectl -n trivy-system get configauditreports.aquasecurity.github.io   -o yaml > configaudit-reports.yaml

          kubectl -n dev get vulnerabilityreports.aquasecurity.github.io -o yaml   >> vulnerability-reports.yaml || true
          kubectl -n dev get configauditreports.aquasecurity.github.io   -o yaml   >> configaudit-reports.yaml    || true

          echo '---' > combined-trivy-report.yaml
          cat vulnerability-reports.yaml >> combined-trivy-report.yaml
          echo '---'                     >> combined-trivy-report.yaml
          cat configaudit-reports.yaml   >> combined-trivy-report.yaml
        '''
        archiveArtifacts artifacts: '*.yaml', fingerprint: true
      }
    }

/* ──────────────────  AI RELEASE NOTES (Groq)  ────────────────── */
stage('AI Release Notes') {
  when {
    expression { currentBuild.currentResult == 'SUCCESS' }
  }

  steps {
    withCredentials([
      string(credentialsId: 'groq-key', variable: 'GROQ_API_KEY')
      // , string(credentialsId: 'gh-token', variable: 'GH_TOKEN') // optional
    ]) {

      /* 1⃣ Gather the Git delta since the last tag */
      sh label: 'Gather Git delta', script: '''
        set -e  # pipefail not available in /bin/sh on some agents
        last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        range="${last_tag:+$last_tag..}HEAD"

        git log --format="%h %s (%an)" "$range"  > commits.txt
        git diff --name-status        "$range"  > files.txt
        git shortlog -sne             "$range"  > authors.txt
      '''

      /* 2⃣ Generate the AI‑driven release notes */
      sh label: 'Generate AI release notes', script: '''
        set -e
        cat > gen_notes.py << 'EOF'
import os, pathlib, textwrap, openai

client = openai.OpenAI(
    base_url="https://api.groq.com/openai/v1",
    api_key=os.environ["GROQ_API_KEY"]
)

read = lambda p: pathlib.Path(p).read_text().strip()
commits, files, authors = map(read, ("commits.txt", "files.txt", "authors.txt"))

SYSTEM = textwrap.dedent("""
You are an expert technical writer generating developer‑focused release notes.
Ensure to have the corresponding commit-id's mentioned.
Produce compact markdown containing:
• A one‑line summary (#commits, #files, #contributors).
• Categorised bullets (✨ Features, 🐛 Fixes, 🚀 Infra, 🔒 Security, 🧪 Tests).
• A "Δ Files" block listing up to 10 most‑touched paths.
• Auto‑link issue/PR refs like #123 (GitHub style).
• Warn about any 'BREAKING CHANGE' lines or major version bumps.
Limit to ~250 words.
""")

USER = f"""Commits:\\n```\\n{commits}\\n```\\n\\nFiles changed:\\n```\\n{files[:3000]}\\n```\\n\\nContributors:\\n```\\n{authors}\\n```"""

response = client.chat.completions.create(
    model="llama3-70b-8192",
    temperature=0.2,
    messages=[
        {"role": "system", "content": SYSTEM},
        {"role": "user",   "content": USER}
    ]
)

notes = response.choices[0].message.content.strip()
pathlib.Path("release-notes.md").write_text(notes + "\\n")
print(notes)
EOF
        python3 gen_notes.py
      '''

      /* 3⃣ Archive the notes with the build */
      archiveArtifacts artifacts: 'release-notes.md', fingerprint: true

      /* 4⃣ (Optional) Publish to GitHub Releases */
      /*
      withCredentials([string(credentialsId: 'gh-token', variable: 'GH_TOKEN')]) {
        sh label: 'Publish GitHub Release', script: '''
          set -e
          tag=$(git describe --tags --abbrev=0 2>/dev/null || date +v%Y%m%d%H%M)
          repo=$(git config --get remote.origin.url | sed 's#.*github.com[:/]##;s/\\.git$//')
          gh release view "$tag" --repo "$repo" >/dev/null 2>&1 || \
          gh release create "$tag" --repo "$repo" --notes-file release-notes.md
        '''
      }
      */
    }
  }
}


    /* ───────────────────────────  DEPLOY DEV  ───────────────────────── */
    stage('Deploy to DEV') {
      steps {
        sh '''
          echo "  Deploying $APP_NAME:${IMAGE_TAG} to dev"
          helm upgrade --install "$APP_NAME" chart \
            --namespace dev --create-namespace \
            --set image.repository=$IMAGE_ROOT/$APP_NAME \
            --set image.tag=$IMAGE_TAG \
            --set imagePullSecrets[0].name=nexus-pull \
            --set service.type=NodePort \
            --set service.nodePort=32007
        '''
      }
    }

    /* ────────────────  MANUAL APPROVAL & PROD DEPLOY  ──────────────── */
    stage('Approval to PROD') {
      steps { input message: "Deploy ${APP_NAME}:${IMAGE_TAG} to PROD?" }
    }

    stage('Deploy to PROD') {
      steps {
        dir('devsecops2-challenge/chart'){
        sh '''
          echo " Deploying $APP_NAME:${IMAGE_TAG} to prod"
          helm upgrade --install "$APP_NAME" chart \
            --namespace prod --create-namespace \
            --set image.repository=$IMAGE_ROOT/$APP_NAME \
            --set image.tag=$IMAGE_TAG \
            --set imagePullSecrets[0].name=nexus-pull \
            --set service.type=NodePort \
            --set service.nodePort=32008
        '''
      }
}
    }
  }

  /* ─────────────────────────  POST ACTIONS  ────────────────────────── */
  post {
  always { cleanWs() }

  success {
    script {
      def recipients = env.GIT_COMMITTER_EMAIL ?: env.DEFAULT_RECIPIENTS
      def buildUrl  = env.BUILD_URL.replaceFirst('http://[^/]+', env.JENKINS_PUBLIC_URL)

      mail to: recipients,
           subject: "${env.JOB_NAME} #${env.BUILD_NUMBER} ✓",
           body:    "Build succeeded — see details at ${buildUrl}"
    }
  }

  failure {
    script {
      def recipients = env.GIT_COMMITTER_EMAIL ?: env.DEFAULT_RECIPIENTS
      def buildUrl  = env.BUILD_URL.replaceFirst('http://[^/]+', env.JENKINS_PUBLIC_URL)

      mail to: recipients,
           subject: "${env.JOB_NAME} #${env.BUILD_NUMBER} ✗",
           body:    "Build failed — investigate console output:\n${buildUrl}"
    }
  }
}

}
